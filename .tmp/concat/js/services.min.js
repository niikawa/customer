/**
 * 共通サービス
 * 
 * @author niikawa
 */
var locationServices = angular.module("myApp");
locationServices.service("Location", ['$location',function($location)
{
    var locationServices = {};
    
    locationServices.home = function()
    {
        $location.path('/');
    };
    
    locationServices.user = function()
    {
        $location.path('/user');
    };

    locationServices.query = function()
    {
        $location.path('/query');
    };

    locationServices.query = function()
    {
        $location.path('/query/list');
    };

    locationServices.querySet = function()
    {
        $location.path('/query/set');
    };

    locationServices.querySave = function()
    {
        $location.path('/query/save');
    };

    locationServices.segment = function()
    {
        $location.path('/segment');
    };

    locationServices.segmentControl = function(id)
    {
        $location.path('/segment/control/'+id);
    };

    locationServices.trigger = function()
    {
        $location.path('/scenario/trigger');
    };

    locationServices.schedule = function()
    {
        $location.path('/scenario/schedule');
    };

    return locationServices;

}]);
/**
 * アプリケーション固有の通信を伴言わない処理を記述するサービスクラス
 **/
var mainServices = angular.module("myApp");
mainServices.service("Main", function()
{
    var mainService = {};
    
    mainService.getUserIdFromList = function(list, parent, child)
    {
        return list[parent].my._id;
    };
    
    mainService.getTaskIdFromList = function(list, parent, child)
    {
        return list[parent].taskList[child]._id;
    };

    mainService.removeTaskByIndex = function(list, parent, child)
    {
        list[parent].taskList.splice(child, 1);
    };

    mainService.getProgressFromList = function(list, parent, child)
    {
        return list[parent].taskList[child].progress;
    };

    mainService.getContentsFromList = function(list, parent, child)
    {
        return list[parent].taskList[child].contents;
    };


    return mainService;

});
var customerServices = angular.module("CustomerServices", ["ngResource"]);
customerServices.factory("Customer", ['$resource','Utility',
    function($resource, Utility) 
    {
        var customerServices = {};
        
        customerServices.resource = $resource('/customer/:id/', {id: '@id'},
        {
            detail:
            {
                method: 'GET',
                url: 'custmoer/detail/:id',
                cache: true,
            },
            orders:
            {
                method: 'GET',
                url: 'custmoer/orders/:id',
                cache: true,
            }
        });

        return customerServices;
    }
]);
var scenarioServices = angular.module("ScenarioServices", ["ngResource"]);
scenarioServices.factory("Scenario", ['$resource','$http','$q','Utility',
    function($resource, $http, $q, Utility) 
    {
        var scenarioServices = {};

        var pageProp = {
                schedule: {type: 1, mode: 0, title: 'スケジュール型', addTitle: '', template: 'views/scenario/schedule.html'}, 
                trigger: {type: 2, mode: 0, title: 'トリガー型', addTitle: '', template: 'views/scenario/trigger.html'}
        };
        scenarioServices.daysCondition = function()
        {
            var data = [];
            var num = 31;
            for (var index = 1; index <= num ; index++)
            {
                data.push({name: index, check:false});
            }
            data.push({name: '最終日', check:false});
            return data;
        };

        scenarioServices.resource = $resource('/scenario/:type/:id/', {id: '@id'},
        {
            list:
            {
                method: 'GET',
                url: 'scenario/list/:id',
                cache: true,
            },
            initializeData:
            {
                method: 'GET',
                url: 'scenario/initialize/:type/:id',
            },
            action:
            {
                method: 'GET',
                url: 'action/:name',
                cache: true,
            },
            save:
            {
                method: 'POST',
                url: 'scenario/save',
            },
            remove:
            {
                method: 'DELETE',
                url: 'scenario/:type/remove/:id',
            },
            valid:
            {
                method: 'GET',
                url: 'scenario/valid',
            },
            priority:
            {
                method: 'POST',
                url: 'scenario/priority',
            },
            typeCount:
            {
                method: 'GET',
                url: 'scenario/typecount',
            },
            executeplan:
            {
                method: 'GET',
                url: 'scenario/execute/plan',
            },
            bulkInvalid:
            {
                method: 'GET',
                url: 'scenario/bulkInvalid',
            },
            bulkEnable:
            {
                method: 'GET',
                url: 'scenario/bulkEnable',
            },
        });
        
        scenarioServices.getPageProp = function(type, id)
        {
            var target = pageProp[type];
            target.addTitle = (void 0 === id) ? '登録' : '更新';
            target.mode = (void 0 === id) ? 1 : 2;
            
            return target;
        };
        
        scenarioServices.validators =
        {
            isSameName : function(parameters)
            {
                return $http.post('scenario/name/', parameters
                ).then(function(response)
                {
                    if (response.data.result.count > 0)
                    {
                        return $q.reject('exists');
                    }
                    return false;
                });
            },
        };
        
        scenarioServices.setActivePushItem = function(items, propertie, bindObj, bindProp)
        {
            angular.forEach(items, function(item, key)
            {
                if (item.isPush)
                {
                    bindObj[bindProp] = item[propertie];
                    return false;
                }
            });
        };
        
        scenarioServices.createCondtionString = function(list)
        {
            var condition = '';
            var last = list.length - 1;
            angular.forEach(list, function(item, key)
            {
                condition += item.logicalname + 'が[' + item.condition.value1;
                if ('' !== item.condition.value2)
                {
                    condition += ',' + item.condition.value2;
                }
                condition += ']' + item.selectedCondition.name;
                
                if (key !== last)
                {
                    condition += ('AND' === item.condition.where) ? ' かつ ' : ' または ';
                }
            });
            return condition;
        };
        
        scenarioServices.getConditionDoc = function(list)
        {
            var doc = [];
            angular.forEach(list, function(items, key)
            {
                var push = [];
                angular.forEach(items, function(item, key)
                {
                    push.push(
                    {
                        physicalname: item.physicalname,
                        condition: item.condition,
                        selectedCondition: item.selectedCondition
                    });
                });
                doc.push(push);
            });
            return doc;
        };
        
        return scenarioServices;
    }
]);
var segmentServices = angular.module("SegmentServices", ["ngResource"]);
segmentServices.factory("Segment", ['$resource', '$http','Utility',
    function($resource, $http, Utility) 
    {
        var segmentServices = {};
        
        segmentServices.resource = $resource('/segment/:id/', {id: '@id'},
        {
            getDoc:
            {
                method: 'GET',
                url: 'segment/getdoc',
            },
            saveDoc:
            {
                method: 'POST',
                url: 'segment/savedoc',
            },
            save:
            {
                method: 'POST',
                url: 'segment/save',
            },
            download:
            {
                method: 'GET',
                url: 'segment/:id/download',
            },
            remove:
            {
                method: 'DELETE',
                url: 'segment/remove/:id/:segment_document_id',
            },
            executeQuery:
            {
                method: 'POST',
                url: 'segment/execute',
            },
            useSegment:
            {
                method: 'POST',
                url: '/segment/query/use',
            }
        });

        segmentServices.pageProp = function(id)
        {
            if (void 0 === id)
            {
                return {
                    viewMode: 1,
                    pageTitle: '登録'
                };
            }
            else
            {
                return {
                    viewMode: 2,
                    pageTitle: '更新'
                };
            }
        };
        
        segmentServices.setWhereProp = function(list, initializeData)
        {
            if (void 0 === initializeData)
            {
                angular.forEach(list, function(v, k)
                {
                    v.where = 'AND';
                });
            }
            else
            {
                angular.forEach(list, function(v, k)
                {
                    var value = (null === initializeData[k]) ? 'AND' : initializeData[k];
                    v.where = value;
                });
            }
        };
        
        segmentServices.setListData = function(queryList, queryIdList, conditionList)
        {
            angular.forEach(queryIdList, function(qid, k1)
            {
                angular.forEach(queryList, function(query, k2)
                {
                    if (qid == query.id)
                    {
                        conditionList.push(query);
                        queryList.splice(k2, 1);
                    }
                });
            });
        };
        
        segmentServices.createExecuteInfo = function(list)
        {
            var qIds = [];
            var where = {};
            var tables = {};
            
            angular.forEach(list, function(v, k)
            {
                qIds.push(v.id);
                where[v.id] = v.where;
                Object.keys(v.tables).forEach(function(key)
                {
                    if (!tables.hasOwnProperty(key))
                    {
                        tables[key] = key;
                    }
                });
            });
            return {qIds: qIds, tables: tables, conditionMap: where};
        };
        
        segmentServices.createSQL = function(list)
        {
            var sql = '';
            var last = list.length -1;
            angular.forEach(list, function(v, k)
            {
                sql += '(' + v.sql + ') ' ;
                if (last !== k) sql += v.where;
            });
            return sql;
        };
        
        segmentServices.getTables = function(list)
        {
            var tables = {};
            angular.forEach(list, function(v, k)
            {
                Object.keys(v.tables).forEach(function(key)
                {
                    if (!tables.hasOwnProperty(key))
                    {
                        tables[key] = key;
                    }
                });
            });
            
            return tables;
        };
        
        segmentServices.createDocData = function(list)
        {
            var sql = '';
            var last = list.length -1;
            var ids = [];
            var where = [];
            angular.forEach(list, function(v, k)
            {
                sql += '(' + v.sql + ') ' ;
                if (last !== k) sql += v.where;
                ids.push(v.id);
                where.push(v.where);
            });
            
            return {condition: sql, qIds: ids, whereList: where};
        };
   
        return segmentServices;
    }
]);
var queryServices = angular.module("QueryServices", ["ngResource"]);
queryServices.factory("Query", ['$resource', '$http','Shared',
    function($resource, $http, Shared)
    {
        var queryServices = {};
        
        queryServices.sql = '';
        
        queryServices.resource = $resource('/query', {id: '@id'},
        {
            getQuery:
            {
                method: 'GET',
                url: '/query/get',
            },
            getList:
            {
                method: 'GET',
                url: '/query/list',
            },
            getControlInit:
            {
                method: 'GET',
                url: '/query/control/:id',
            },
            create:
            {
                method: 'POST',
                url: '/query/create',
            },
            remove:
            {
                method: 'DELETE',
                url: '/query/:id',
            },
            getUseSegment:
            {
                method: 'GET',
                url: '/query/use/segment/:id',
            },
            executeQuery:
            {
                method: 'POST',
                url: '/query/execute',
            },
        });

        queryServices.getContentsByColumsType = function(type)
        {
            var countents = {inputType:'', };
            console.log(type);
            if ('INT' === type)
            {
                countents.inputType = 'number';
            }
            else if ('VARCHAR' === type)
            {
                countents.inputType = 'text';
            }
            else if ('DATETIME' === type)
            {
                countents.inputType = 'date';
            }
            return countents.inputType;
        };
        
        queryServices.createCondtionString = function(list)
        {
            angular.forEach(list, function(v, k)
            {
                if (void 0 === v.condition.value2 || '' === v.condition.value2)
                {
                    v.selectedCondition.condtionString = 
                        v.condition.value1 +''+ v.selectedCondition.name;
                }
                else
                {
                    v.selectedCondition.condtionString = 
                        v.condition.value1 +'から'+ v.condition.value2 + v.selectedCondition.name;
                }
            });
        };

        queryServices.getTables = function(list)
        {
            var tables = {};
            angular.forEach(list, function(v, k)
            {
                if (void 0 === tables[v.table.physicalname])
                {
                    tables[v.table.physicalname] = [];
                }
                var info = 
                {
                    column: v.column.physicalname,
                    conditionType: v.selectedCondition.value,
                    values: v.condition
                };
                tables[v.table.physicalname].push(info);
            });
            return tables;
        };
        
        queryServices.getRefTabels = function(tables)
        {
            var tableList = [];
            angular.forEach(tables, function(table)
            {
                tableList.push(table);
            });
            return tableList;
        };
        
        queryServices.getReturnURL = function()
        {
            var root = Shared.getRoot();
            var num = root.length;
            var before = root[root.length-1];
            var url = '';
            if ('query list' === before)
            {
                url = '/query/list';
            }
            else if ('query list' === before)
            {
                url = '/segment/control';
            }
            else
            {
                for (num; 0 < num; num--)
                {
                    if ('query list' === root[num])
                    {
                        url = '/query/list';
                        break;
                    }
                    else if ('segment control' === root[num])
                    {
                        url = '/segment/control';
                        break;
                    }
                }
            }
            return url;
        };

        return queryServices;
    }
]);
var approachServices = angular.module("ApproachServices", ["ngResource"]);
approachServices.factory("Approach", ['$resource','Utility',
    function($resource, Utility) 
    {
        var approachServices = {};
        
        approachServices.resource = $resource('/approach/');
        
        approachServices.pageProp = function(id)
        {
            
            if (void 0 === id)
            {
                return {
                    viewMode: 1,
                    pageTitle: '登録'
                };
            }
            else
            {
                return {
                    viewMode: 2,
                    pageTitle: '更新'
                };
            }
        };

        approachServices.getInfomation = function(id)
        {
            var info = {};
            if (1 === id)
            {
                info.title = '1日の制限回数について';
                info.message = '対象の顧客に対して1日に抽出対象とする回数になります。<br>複数のシナリオで抽出対象となる顧客の場合この回数以上は抽出されなくなります。';
            }
            else if (2 === id)
            {
                info.title = '1週間の制限回数について';
                info.message = '対象の顧客に対して1週間に抽出対象とする回数';
            }
            return info;
        };
        
        return approachServices;
    }
]);
var uesrServices = angular.module("UesrServices", ["ngResource"]);
uesrServices.factory("User", ['$resource','$http','$q','Utility',
    function($resource, $http, $q, Utility)
    {
        var userService = {};
        
        var pageProp = {
                regist: {type: 1, title: 'ユーザー登録'}, 
                edit: {type: 2, title: 'ユーザー更新'}
            };
        
        userService.resource = $resource('/user/:id', {id: '@id'},
        {
            create:
            {
                method: 'POST',
                url: 'user/create',
            },
            remove:
            {
                method: 'GET',
                url: 'user/delete',
            },
        });
        
        userService.validators = 
        {
            isSameMailAddress : function(userId, mailaddress)
            {
                return $http.post('user/mail/',{user_id: userId, mailaddress: mailaddress}
                ).then(function(response)
                {
                    if (response.data.result.count > 0)
                    {
                        return $q.reject('exists');
                    }
                    return false;
                });
            }
        };
        
        //生年月日を生成
        userService.createBirth = function (year, month, day)
        {
            if ('' !== year && '' !== month && '' !== day ) {
                
                return year + '-' + month + '-' + day;
            }
            return '';
        };
        
        //都道府県を取得
        userService.getPrefectures = function()
        {
            return [
                {value:'01', text:'北海道'},{value:'02', text:'青森'}, {value:'03', text:'岩手'},
                {value:'04', text:'宮城'},{value:'05', text:'秋田'}, {value:'06', text:'山形'},
                {value:'07', text:'福島'},{value:'08', text:'茨城'}, {value:'09', text:'栃木'},
                {value:'10', text:'群馬'},{value:'11', text:'埼玉'}, {value:'12', text:'千葉'},
                {value:'13', text:'東京'},{value:'14', text:'神奈川'}, {value:'15', text:'新潟'},
                {value:'16', text:'富山'},{value:'17', text:'石川'}, {value:'18', text:'福井'},
                {value:'19', text:'山梨'},{value:'20', text:'長野'}, {value:'21', text:'岐阜'},
                {value:'22', text:'静岡'},{value:'23', text:'愛知'}, {value:'24', text:'三重'},
                {value:'25', text:'滋賀'},{value:'26', text:'京都'}, {value:'27', text:'大阪'},
                {value:'28', text:'兵庫'},{value:'29', text:'奈良'}, {value:'30', text:'和歌山'},
                {value:'31', text:'鳥取'},{value:'32', text:'島根'}, {value:'33', text:'岡山'},
                {value:'34', text:'広島'},{value:'35', text:'山口'}, {value:'36', text:'徳島'},
                {value:'37', text:'香川'},{value:'38', text:'愛媛'}, {value:'39', text:'高知'},
                {value:'40', text:'福岡'},{value:'41', text:'佐賀'}, {value:'42', text:'長崎'},
                {value:'43', text:'熊本'},{value:'44', text:'大分'}, {value:'45', text:'宮崎'},
                {value:'46', text:'鹿児島'},{value:'47', text:'沖縄'},
            ];
        };
        
        userService.getPageProp = function(id)
        {
            if (void 0 === id)
            {
                return pageProp.regist;
            }
            else
            {
                return pageProp.edit;
            }
            
        };
        
        userService.getSelectedUserIdAndML = function(list, name)
        {
            var selectedList = [];
            var num = list.length;
            for (var i = 0; i < num; i ++)
            {
                if (list[i][name])
                {
                   selectedList.push({_id: list[i]._id, mailAddress:list[i].mailAddress}); 
                }
            }
            return selectedList;
        };

        return userService;        
    }
]);
var roleServices = angular.module("RoleServices", ["ngResource"]);
roleServices.factory("Role", ['$resource','Utility',
    function($resource, Utility) 
    {
        var roleServices = {};
        
        roleServices.resource = $resource('/role/:id', {id: '@id'}, {});

        return roleServices;
    }
]);
var accessServices = angular.module("AccessServices", ["ngResource"]);
accessServices.factory("Access", ['$resource','Utility',
    function($resource, Utility) 
    {
        var accessServices = {};
        
        accessServices.resource = $resource('/access/', {}, 
        {
            day: 
            {
                method:"POST",
                url: "/access"
            },
            dayByUser: 
            {
                method:"POST",
                url: "/access/user"
            }
        });
        return accessServices;
    }
]);
var bugServices = angular.module("BugServices", ["ngResource"]);
bugServices.factory("Bug", ['$resource','Utility', 'Upload',
    function($resource, Utility, Upload) 
    {
        var bugServices = {};
        
        bugServices.categoryList = 
        [
            {name: 'ダッシュボード', type: 1},
            {name: 'トリガーシナリオ管理', type: 2},
            {name: 'スケジュールシナリオ管理', type: 3},
            {name: 'セグメント管理', type: 4},
            {name: 'クエリー管理', type: 5},
            {name: 'アプローチ管理', type: 6},
            {name: 'ユーザー管理', type: 7},
            {name: '操作履歴', type: 8},
            {name: 'その他', type: 99},
        ];

        bugServices.resource = $resource('/bug/', {}, 
        {
            getByConditon:
            {
                method:"POST",
                url: "/bug"
            },
            resolve:
            {
                method:"GET",
                url: "/bug/resolve/:id"
            },
            save: 
            {
                method:"POST",
                url: "/bug/save"
            },
            saveComment: 
            {
                method:"POST",
                url: "/bug/save/comment"
            },
            getComment: 
            {
                method:"GET",
                url: "/bug/comment/:id"
            },
            vote:
            {
                method:"GET",
                url: "/bug/vote/:id"
            },
            download:
            {
                method:"GET",
                url: "/bug/download/:id"
            },
        });
        
        bugServices.commentSaveAndUpload = function(file, parameter, callback)
        {
            Upload.upload(
            {
                "url":"/bug/save/comment/upload/",
                file: file,
                data: {data: parameter},
            }).success(function(result, status, headers, config)
            {
                callback(null);
                
            }).error(function()
            {
                callback("通信エラー");
            });
        };
        
        bugServices.saveAndUpload = function(file, parameter, callback)
        {
            Upload.upload(
            {
                "url":"/bug/save/upload/",
                file: file,
                data: {data: parameter},
            }).success(function(result, status, headers, config)
            {
                callback(null);
                
            }).error(function()
            {
                callback("通信エラー");
            });
        };
        
        bugServices.addViewInfo = function(list)
        {
            angular.forEach(list, function(item)
            {
                switch (item.category)
                {
                    case 1:
                        item.category_name = 'ダッシュボード';
                        break;
                    case 2:
                        item.category_name = 'トリガーシナリオ管理';
                        break;
                    case 3:
                        item.category_name = 'スケジュールシナリオ管理';
                        break;
                    case 4:
                        item.category_name = 'セグメント管理';
                        break;
                    case 5:
                        item.category_name = 'クエリー管理';
                        break;
                    case 6:
                        item.category_name = 'アプローチ管理';
                        break;
                    case 7:
                        item.category_name = 'ユーザー管理';
                        break;
                    case 8:
                        item.category_name = '操作履歴';
                        break;
                    default:
                        item.category_name = 'その他';
                }
                item.type_name = (1 === item.type) ? '要望' : 'バグ';
                item.resolve_name = (1 === item.resolve) ? '解決' : '未解決';
            });
        };

        return bugServices;
    }
]);
var azureServices = angular.module("AzureServices", ["ngResource"]);
azureServices.factory("Azure", ['$resource', '$http','Shared',
    function($resource, $http, Shared)
    {
        var azureServices = {};
        
        azureServices.resource = $resource('/customer/:id/', {id: '@id'},
        {
            recomender:
            {
                method: 'GET',
                url: '/azure/recomender/:id',
            },
        });

        return azureServices;
    }
]);