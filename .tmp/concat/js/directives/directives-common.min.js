var myApp = angular.module('myApp');
myApp.directive('spinnerDirective', [function()
{
    return {
        restrict: 'E',
        scope: {is: '=', src: '@'},
        template: '<div ng-show="is"><img ng-src="{{src}}"></div>',
        link: function (scope, element, attrs) 
        {
        }
    };
}]);
var myApp = angular.module('myApp');
myApp.directive('closeButtonDirecitve', ['Shared', 'Utility', function(Shared, Utility)
{
    return {
        restrict: 'E',
        scope: {execute: '&'},
        template: '<button ng-if="isShowMine" class="close-button" ng-click="click()"><i class="fa fa-times"></i></button>',
        link: function (scope, element, attrs) 
        {
            if (3 != Shared.get("role"))
            {
                scope.isShowMine = true;
            }
            else
            {
                scope.isShowMine = false;
            }
            
            scope.click = function()
            {
                Utility.confirmAlert(scope.execute);
            };
        }
    };
}]);
var myApp = angular.module('myApp');
myApp.directive('linkButtonDirecitve', ['Shared',function(Shared)
{
    return {
        restrict: 'E',
        scope: {href: '@', name: "@"},
        template: '<a ng-if="isShowMine" class="btn btn-default" ng-href="/#/{{href}}">{{name}}</a> ',
        link: function (scope, element, attrs) 
        {
            if (3 != Shared.get("role"))
            {
                scope.isShowMine = true;
            }
            else
            {
                scope.isShowMine = false;
            }
            
            scope.click = function()
            {
                scope.execute();
            };
        }
    };
}]);
var myApp = angular.module('myApp');
myApp.directive('pushDirective', [function(){
    return {
        restrict: 'A',
        scope:{
            list : '=',
            pushInfo: '=info',
            active: '=',
            activekey: '@',
            multiple: '='
        },
        link: function (scope, element, attrs) 
        {
            element.css({cursor: 'pointer'});
            
            if (void 0 !== scope.active)
            {
                var setActive = false;
                if ("boolean" === typeof(scope.active))
                {
                    scope.pushInfo.isPush = scope.active;
                    setActive = scope.active;
                }
                else if ("string" === typeof(scope.active) || "number" === typeof(scope.active))
                {
                    if (scope.pushInfo[scope.activekey] == scope.active)
                    {
                        scope.pushInfo.isPush = true;
                        setActive = true;
                    }
                }
                if (setActive) element.addClass('push-active');
            }
            else
            {
                scope.pushInfo.isPush = false;
            }

            element.on('click', function()
            {
                scope.$apply(function()
                {
                    if (element.hasClass('push-active'))
                    {
                        scope.pushInfo.isPush = false;
                        element.removeClass('push-active');
                    }
                    else
                    {
                        if (void 0 === scope.multiple || !scope.multiple)
                        {
                            element.parent().children().removeClass('push-active');
                            angular.forEach(scope.list, function(item, key){item.isPush = false;});
                        }
                        scope.pushInfo.isPush = true;
                        element.addClass('push-active');
                    }
                });
            });
        }
    };
}]);
var myApp = angular.module('myApp');
myApp.directive('autoCompleteDirective', [function()
{
    return {
        restrict: 'E',
        scope: {selectedItem: '=', itemList: '=', execute: '&', namePropertie: '@', appendString: '@', showLabel: '=', selectByList: '=', selectName: '='},
        template:   '<form class="navbar-form navbar-left"><input ng-show="!isLabel" class="form-control d-complete-input" ng-model="selectName">' +
                    '<span ng-show="isLabel && selectName.length != 0" ng-click="changeElement()">{{appendString}}{{selectName}}</span>' +
                    '<ul class="complete-list" ng-show="isFocus">' +
                    '<li ng-repeat="item in itemList" ng-click="click($event, item)" >' +
                    '{{item[namePropertie]}}' +
                    '</li>' +
                    '</ul></form>',
        replace: true,
        link: function (scope, element, attrs) 
        {
            scope.selectName = '';
            scope.isFocus = false;
            scope.isLabel = false;
            var originList = [];
            scope.$watch('itemList', function(newValue, oldValue)
            {
                if (void 0 !== newValue && void 0 !== oldValue)
                {
                    console.log('watch itemList');
                    if (newValue.length === oldValue.length)
                    {
                        return false;
                    }
                    if (newValue.length > oldValue.length)
                    {
                        originList = angular.copy(newValue);
                    }
                    else if (newValue.length < oldValue.length)
                    {
                        originList = angular.copy(oldValue);
                    }
                }
                else
                {
                    if (void 0 !== scope.itemList)
                    {
                        console.log('set initialize data');
                        angular.copy(scope.itemList, originList);
                    }
                }
            });

            element.find('input').on('focus', function()
            {
                if (0 < scope.itemList.length)
                {
                    scope.$apply(function ()
                    {
                        scope.isFocus = true;
                    });
                }
            });
            
            element.find('input').on('blur', function()
            {
                var hide = setInterval(function(isExist)
                {
                    scope.$apply(function ()
                    {
                        if (scope.selectByList)
                        {
                            var num = originList.length;
                            var isExist = scope.selectName.length === 0 ? true : false;
                            for (var i = 0; i < num; i++)
                            {
                                if (scope.selectName === originList[i][scope.namePropertie])
                                {
                                    isExist = true;
                                    break;
                                }
                            }
                            
                            if (isExist)
                            {
                                element.find('input').removeClass('auto-complete-item-error');
                            }
                            else
                            {
                                element.find('input').addClass('auto-complete-item-error');
                            }
                            scope.isFocus = false;
                        }
                    });
                    clearInterval(hide);
                }, 300);
            });
            
            element.find('input').on('keyup', function()
            {
                if (0 === originList.length)
                {
                    angular.copy(scope.itemList, originList);
                }
                var createList = [];

                if (0 < scope.itemList.length)
                {
                    scope.isFocus = true;
                }
                if (scope.selectName.length === 0)
                {
                    angular.copy(originList, createList);
                }
                else
                {
                    var num = originList.length;
                    for (var i = 0; i < num ; i++)
                    {
                        if (originList[i][scope.namePropertie].indexOf(scope.selectName) !== -1)
                        {
                            createList.push(angular.copy(originList[i]));
                        }
                    }
                }
                scope.$apply(function ()
                {
                    angular.copy(createList, scope.itemList);
                });
            });
            
            scope.click = function ($event, item) 
            {
                //イベントが伝搬しないように制御
                $event.preventDefault();
                $event.stopPropagation();
                
                angular.copy(item, scope.selectedItem);
                element.find('input').removeClass('auto-complete-item-error');
                scope.isFocus = false;
                if (void 0 !== scope.execute)
                {
                    scope.execute();
                }
                if (scope.showLabel) scope.isLabel = true;
                scope.selectName = item[scope.namePropertie]; 
            };
            
            scope.changeElement = function()
            {
                angular.copy(originList, scope.itemList);
                scope.isLabel = false;
                element.find('input').focus();
            };
        }
    };
}]);
var myApp = angular.module('myApp');
myApp.directive('refineDirective', [function()
{
    return {
        restrict: 'A',
        scope: {refineItem: '=', namePropertie: '@', keyword: '=', execute: '&', },
        replace: true,
        link: function (scope, element, attrs) 
        {
            var originList = [];

            element.on('keyup', function()
            {
                if (0 === originList.length)
                {
                    angular.copy(scope.refineItem, originList);
                }
                var createList = [];

                if (void 0 === scope.keyword || scope.keyword.length === 0)
                {
                    angular.copy(originList, createList);
                }
                else
                {
                    var num = originList.length;
                    var nameList = scope.namePropertie.split('|');
                    var pushList = [];
                    var primeKey = Object.keys(originList[0]);

                    for (var i = 0; i < num ; i++)
                    {
                        angular.forEach(nameList, function(name, key)
                        {
                            if (originList[i][name].indexOf(scope.keyword) !== -1)
                            {
                                if (void 0 === pushList[originList[i][primeKey[0]]])
                                {
                                    createList.push(angular.copy(originList[i]));
                                    pushList[originList[i][primeKey[0]]] = true;
                                }
                            }
                        });
                    }
                }
                scope.$apply(function ()
                {
                    angular.copy(createList, scope.refineItem);
                });
            });
        }
    };
}]);
var dDSharedServices = angular.module("myApp");
dDSharedServices.service('DDShared', [function()
{
    var dDSharedServices = {};
    var orverIndex = 0;
    var fromData = {};
    var deforePosistion = 0;
    var isMoveDown = false;

    dDSharedServices.setFrom = function(data)
    {
        fromData = data;
    };
    
    dDSharedServices.getFrom = function()
    {
        return fromData;
    };
    
    dDSharedServices.getFromCopyByIndex = function(index)
    {
        return angular.copy(fromData[index]);
    };

    dDSharedServices.getCopyFrom = function()
    {
        return angular.copy(fromData);
    };

    dDSharedServices.setOrverIndex = function(index)
    {
        orverIndex = index;
    };

    dDSharedServices.getOrverIndex = function()
    {
        return orverIndex;
    };

    dDSharedServices.getBeforePosition = function()
    {
        return deforePosistion;
    };

    dDSharedServices.setBeforePosition = function(num)
    {
        deforePosistion = num;
    };

    dDSharedServices.isMoveDown = function()
    {
        return isMoveDown;
    };

    dDSharedServices.setMove = function(num)
    {
        isMoveDown = (0 < num) ? true : false;
    };

    dDSharedServices.clear = function()
    {
        orverIndex = 0;
        fromData = {};
    };

    return dDSharedServices;
}]);

var myApp = angular.module('myApp');
myApp.directive('dragItemDirective', ['DDShared', function(DDShared)
{
    return {
        restrict: 'AE',
        transclude: false,
        require: '^ngModel',
        scope: {dragindex: '='},
        link: function (scope, element, attrs, ctrl) 
        {
            element.attr('draggable', true);
            element.attr('data-index', scope.dragindex);
            
            element.on('dragstart', function(event)
            {
                var index = event.target.dataset.index;
                var item = element.html();
                event.originalEvent.dataTransfer.setData('item', item);
                event.originalEvent.dataTransfer.setData('itemIndex', index);
                DDShared.setFrom(ctrl.$modelValue);
                DDShared.setBeforePosition(0);
            });
        }
    };
}]);
myApp.directive('dropDirective', ['DDShared', function(DDShared)
{
    return {
        restrict: 'A',
        scope: {dropLineName: '@'},
        require: '^ngModel',
        link: function (scope, element, attrs, ctrl) 
        {
            var lineName = (void 0 === scope.dropLineName || '' === scope.dropLineName)  ? 'line' : scope.dropLineName;
            
            element.on('dragenter', function(event)
            {
                element.addClass('ui-drop-target');
            });
            
            element.on('dragover', function(event)
            {
                event.preventDefault();
                if (void 0 !== event.target.dataset.index)
                {
                    DDShared.setOrverIndex(event.target.dataset.index);
                    var wholeheight = Math.max.apply(
                        null, 
                        [document.body.clientHeight , document.body.scrollHeight, document.documentElement.scrollHeight, document.documentElement.clientHeight]
                    );
                    var windowHeight = (window.innerHeight||document.body.clientHeight||0);
                    if (wholeheight > windowHeight)
                    {
                        var now = event.target.getBoundingClientRect().top + $(event.target).position().top + 50;
                        var move = 0;
                        if (0 != DDShared.getBeforePosition() && DDShared.getBeforePosition() != now)
                        {
                            var elementHeight = $(event.target).height() + 15;
                            // up : down
                            move =(DDShared.getBeforePosition() > now) ?  -elementHeight : elementHeight;
                            DDShared.setMove(move);
                            DDShared.setBeforePosition(now - (move));
                            $(window).scrollTop($(window).scrollTop()+move);
                            
                        }
                        else
                        {
                            DDShared.setBeforePosition(now);
                        }
                    }
                }
                event.originalEvent.dataTransfer.dropEffect = 'move';
            });
            
            element.on('dragleave', function(event)
            {
                element.removeClass('ui-drop-target');
            });
            
            element.on('drop', function(event)
            {
                event.stopPropagation();
                DDShared.setBeforePosition(0);
                var index = event.originalEvent.dataTransfer.getData('itemIndex');
                var pushItem = {};
                
                var orverIndex = (ctrl.$modelValue.length === 0) ? 0 : DDShared.getOrverIndex();
                if (index === orverIndex) return false;

                if (angular.isArray(DDShared.getFrom()))
                {
                    pushItem = DDShared.getFromCopyByIndex(index);
                    DDShared.getFrom().splice(index, 1);
                }
                else
                {
                    pushItem = DDShared.getCopyFrom();
                }
                
                if (void 0 !== pushItem)
                {
                    ctrl.$modelValue.splice(orverIndex, 0, pushItem);
                }
                
                var len = ctrl.$modelValue.length;

                for (var i=0; i < len; i++)
                {
                    ctrl.$modelValue[i][lineName] = i+1;
                }
                var emitObject = {
                    to:{}, 
                    from:{}, 
                    remove:{}, 
                    isSameContainer:false, 
                    areaKey: attrs.dropAreaKey, 
                    insertLine: orverIndex
                };
                emitObject.to = ctrl.$modelValue;
                emitObject.from = DDShared.getFrom();
                emitObject.remove = pushItem;
                emitObject.isSameContainer = (emitObject.to == emitObject.from);
                scope.$emit('dropItemComplete', emitObject);
                console.log(emitObject);
                scope.$$phase || scope.$apply();
            });
        }
    };
}]);

myApp.directive('dropJoinDirective', ['DDShared', function(DDShared)
{
    //完全に画面（データ依存）のため使い回しはできない
    return {
        restrict: 'A',
        scope: {dropJoinIndex: '='},
        require: '^ngModel',
        link: function (scope, element, attrs, ctrl) 
        {
            element.on('dragenter', function(event)
            {
                element.addClass('ui-drop-target');
            });
            element.on('dragover', function(event)
            {
                event.preventDefault();
                if (void 0 !== event.target.dataset.index)
                {
                    DDShared.setOrverIndex(event.target.dataset.index);
                }
                event.originalEvent.dataTransfer.dropEffect = 'move';
            });
            
            element.on('dragleave', function(event)
            {
                element.removeClass('ui-drop-target');
            });
            
            element.on('drop', function(event)
            {
                event.stopPropagation();
                
                if (ctrl.$modelValue == DDShared.getFrom()) return false;

                var index = event.originalEvent.dataTransfer.getData('itemIndex');
                //自分自身へのjoinは禁止
                var pushItem = DDShared.getFromCopyByIndex(index);
                if (void 0 === pushItem) return false;
                
                //固有条件
                var isModelArray = false;
                console.log(ctrl.$modelValue);
                if (angular.isArray(ctrl.$modelValue))
                {
                    //画面別
                    if (ctrl.$modelValue[0].hasOwnProperty('table') 
                        && ctrl.$modelValue[0].hasOwnProperty('column') )
                    {
                        if (ctrl.$modelValue[0].table.physicalname == pushItem[0].table.physicalname 
                            && ctrl.$modelValue[0].column.physicalname == pushItem[0].column.physicalname) return false;
                    }
                    isModelArray = true;
                }
                
                if (angular.isArray(DDShared.getFrom()))
                {
                    DDShared.getFrom().splice(index, 1);
                }
                else
                {
                    pushItem = DDShared.getCopyFrom();
                }
                
                if (ctrl.$modelValue == DDShared.getFrom())
                {
                    console.log(index);
                    //順番を入れ替える
                    ctrl.$modelValue.splice(index, index+1, pushItem, ctrl.$modelValue[index+1]);
                    return false;
                }
                else
                {
                    if (!isModelArray)
                    {
                        var mergeItems = [];
                        mergeItems.push(ctrl.$modelValue);
                        mergeItems.push(pushItem);
                    }
                    else
                    {
                        if (angular.isArray(pushItem))
                        {
                            ctrl.$modelValue.push(pushItem[0]);
                        }
                        else
                        {
                            ctrl.$modelValue.push(pushItem);
                        }
                    }
                }

                if (ctrl.$modelValue.length > 1) 
                {
                    ctrl.$modelValue.isJoin = true;
                }
                else
                {
                    ctrl.$modelValue.isJoin = false;
                }
                console.log(ctrl.$modelValue);
                scope.$$phase || scope.$apply();
//                scope.$emit('dropJoinItemComplete', mergeItems);
                console.log('drop join complete');
            });
        }
    };
}]);

var myApp = angular.module('myApp');
myApp.directive('myValidators', [function() {
    return {
        require: 'ngModel',
        scope: {
            myValidators: '=',
        },
        link: function (scope, elem, attrs, ctrl) {
            var validators = scope.myValidators || {};
            angular.forEach(validators, function (val, key) {
                ctrl.$validators[key] = val;
            });
        }
    };
}]);
myApp.directive('myAsyncValidators', [function() {
    return {
        require: 'ngModel',
        scope: {
            myAsyncValidators: '='
        },
        link: function (scope, elem, attrs, ctrl) {
            var asyncValidators = scope.myAsyncValidators || {};
            angular.forEach(asyncValidators, function (val, key) {
                ctrl.$asyncValidators[key] = val;
            });
        }
    };
}]);