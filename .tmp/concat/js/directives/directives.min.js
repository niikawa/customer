var myApp = angular.module('myApp');
myApp.controller('CalendarCtrl',['$scope','Calendar', 'Utility', function ($scope, Calendar, Utility)
{
    $scope.calendarList = [];
    $scope.calendarofMonthList = [];
    $scope.isWeek = false;
    $scope.isMonth = false;
    var isDisabled = false;
    $scope.initialize = function()
    {
        Calendar.resource.get().$promise.then(function(response)
        {
            $scope.isWeek = true;
            $scope.calendarList = response.data;
        });
    };
    
    $scope.nextDay = function()
    {
        if (isDisabled) return;
        isDisabled = true;
        var days = Object.keys($scope.calendarList);
        var last = Utility.moment(days[days.length-1]).format("YYYY-MM-DD");
        var next = Utility.addDay(last, 1).format("YYYY-MM-DD");
        
        Calendar.resource.oneDay({day: next}).$promise.then(function(response)
        {
            delete $scope.calendarList[Object.keys($scope.calendarList)[0]];
            var nextKey = Object.keys(response.data);
            $scope.calendarList[nextKey] = response.data[nextKey];
            isDisabled = false;
        });
    };
    
    $scope.deforeDay = function()
    {
        if (isDisabled) return;
        isDisabled = true;
        var last = Utility.moment(Object.keys($scope.calendarList)[0]).format("YYYY-MM-DD");
        var next = Utility.subtractDay(last, 1).format("YYYY-MM-DD");
        
        Calendar.resource.oneDay({day: next}).$promise.then(function(response)
        {
            var days = Object.keys($scope.calendarList);
            delete $scope.calendarList[days[days.length-1]];
            var minKey = Object.keys(response.data);
            var newList = {};
            newList[minKey] = response.data[minKey];
            Object.keys($scope.calendarList).forEach(function(key)
            {
                newList[key] = $scope.calendarList[key];
            });
            $scope.calendarList = newList;
            isDisabled = false;
        });
    };
    
    $scope.showWeek = function()
    {
        if (isDisabled) return;
        isDisabled = true;
        Calendar.resource.get().$promise.then(function(response)
        {
            isDisabled = false;
            $scope.isWeek = true;
            $scope.isMonth = false;
            $scope.calendarList = response.data;
        });
    };
    
    $scope.showMonth = function()
    {
        if (isDisabled) return;
        isDisabled = true;
        var days = Object.keys($scope.calendarList);
        var year = Utility.moment(days[days.length-1]).format("YYYY");
        var month = Utility.moment(days[days.length-1]).format("MM");
        Calendar.resource.month({year:year, month: month}).$promise.then(function(response)
        {
            isDisabled = false;
            $scope.isMonth = true;
            $scope.isWeek = false;
            $scope.calendarofMonthList = response.data;
            $scope.year = response.year;
            $scope.month = response.month;
        });
    };
    
    $scope.nextMonth = function()
    {
        if (isDisabled) return;
        isDisabled = true;
        var now = $scope.year + '/' + $scope.month + '/01';
        var yearMonth = Utility.addMonth(now, 1).format("YYYY-MM");
        var params = yearMonth.split("-");

        Calendar.resource.month({year:params[0], month: params[1]}).$promise.then(function(response)
        {
            isDisabled = false;
            $scope.isWeek = false;
            $scope.isMonth = true;
            $scope.calendarofMonthList = response.data;
            $scope.year = response.year;
            $scope.month = response.month;
        });
    };

    $scope.deforeMonth = function()
    {
        if (isDisabled) return;
        isDisabled = true;
        var now = $scope.year + '/' + $scope.month + '/01';
        var yearMonth = Utility.subtractMonth(now, 1).format("YYYY-MM");
        var params = yearMonth.split("-");
        Calendar.resource.month({year:params[0], month: params[1]}).$promise.then(function(response)
        {
            isDisabled = false;
            $scope.isWeek = false;
            $scope.isMonth = true;
            $scope.calendarofMonthList = response.data;
            $scope.year = response.year;
            $scope.month = response.month;
        });
    };

}]);
myApp.factory("Calendar", ['$resource','Utility', function($resource, Utility) 
{
    var calendarServices = {};
    
    calendarServices.resource = $resource('/calendar/', {}, 
    {
        oneDay:
        {
            method:"GET",
            url: "calendar/one/:day"
        },
        month:
        {
            method:"GET",
            url: "calendar/:year/:month"
        },
    });
    
    return calendarServices;
}]);

myApp.directive('calendarDirective', ['Utility', function(Utility)
{
    return {
        restrict: 'E',
        templateUrl: '../../partials/calendar.html',
        controller: 'CalendarCtrl',
        //replace: true,
        link: function (scope, element, attrs, ctrl) 
        {
            scope.showCircle = false;

            scope.enterCircle = function()
            {
                scope.showCircle = true;
            };
            
            scope.leaveCircle = function()
            {
                scope.showCircle = false;
            };
            
            scope.isTrigger = function(type)
            {
                return 1 === type;
            };
            scope.isScSingle = function(type)
            {
                return 2 === type;
            };
            scope.isScPriod = function(type)
            {
                return 3 === type;
            };
            scope.isHoliday = function(dayMin)
            {
                return '0sun' == dayMin;
            };
            scope.isHolidayToWeek = function(day)
            {
                return 0 == Utility.moment(day).format("e");
            };
        }
    };
}]);

var myApp = angular.module('myApp');
myApp.directive('conditionDirective', ['Utility', function(Utility){
    return {
        restrict: 'EA',
        scope:{
            conditionAppend: '=',
            screenType: '@',
        },
        template: 
                '指定した値' +
                '<select ng-model="mySlected" class="form-control"' +
                    ' ng-options="item as item.name for item in selectItems" ng-required="true"></select>'+
                'ものを条件とする'+
                '<div ng-if="isOneInput"><input type="text" name="{{conditionAppend.column.physicalname}}" class="form-control" ng-model="conditionAppend.condition.value1" ng-keyup="check()" ng-required="true">'+

                '<div ng-if="conditionAppend.error" class="item-error-box"><p class="item-error">{{conditionAppend.message}}</p></div>'+

                '</div>'+
                '<div ng-if="isTextArea"><textarea class="form-control" ng-model="conditionAppend.condition.value1" ng-required="true"></textarea></div>'+
                
                '<div ng-if="isTwoInput"><input type="text" class="form-control" ng-model="conditionAppend.condition.value1" ng-keyup="check()" ng-required="true">～<input type="text" class="form-control" ng-model="conditionAppend.condition.value2" ng-keyup="check()" ng-required="true"></div>'
                  ,
        link: function (scope, element, attrs) 
        {
            var showOneInput = function()
            {
                scope.isOneInput = true;
                scope.isTextArea = false;
                scope.isTwoInput = false;
            };
            
            var showTextArea = function()
            {
                scope.isOneInput = false;
                scope.isTextArea = true;
                scope.isTwoInput = false;
            };
            
            var showTwoInput = function()
            {
                scope.isOneInput = false;
                scope.isTextArea = false;
                scope.isTwoInput = true;
            };
            
            if (1 == scope.screenType)
            {
                scope.selectItems = [
                    {name: 'に等しい', value: 1, execute: showOneInput, 'symbol': '='},
                    {name: '以上', value: 2, execute: showOneInput, 'symbol': '>='},
                    {name: '以下', value: 3, execute: showOneInput, 'symbol': '<='},
                    {name: 'を超える', value: 4, execute: showOneInput, 'symbol': '>'},
                    {name: '未満', value: 5, execute: showOneInput, 'symbol': '<'},
                    {name: 'の間', value: 6, execute: showTwoInput, 'symbol': 'BETWEEN'},
                ];
            }
            else
            {
                scope.selectItems = [
                    {name: 'に等しい', value: 1, execute: showOneInput, 'symbol': '='},
                    {name: '以上', value: 2, execute: showOneInput, 'symbol': '>='},
                    {name: '以下', value: 3, execute: showOneInput, 'symbol': '<='},
                    {name: 'を超える', value: 4, execute: showOneInput, 'symbol': '>'},
                    {name: '未満', value: 5, execute: showOneInput, 'symbol': '<'},
                    {name: 'の間', value: 6, execute: showTwoInput, 'symbol': 'BETWEEN'},
                    {name: 'を含む', value: 7, execute: showTextArea, 'symbol': 'IN'},
                    {name: 'を含まない', value: 8, execute: showTextArea, 'symbol': 'NOT IN'},
                    {name: 'から始まる', value: 9, execute: showOneInput, 'symbol': 'LIKE'},
                    {name: 'で終わる', value: 10, execute: showOneInput, 'symbol': 'LIKE'},
                    {name: 'を一部に持つ', value: 11, execute: showOneInput, 'symbol': 'LIKE'},
                ];
            }
            

            scope.isOneInput = false;
            scope.isTextArea = false;
            scope.isTwoInput = false;

            if (void 0 === scope.conditionAppend.selectedCondition)
            {
                scope.conditionAppend.selectedCondition = {name: '', value: '', symbol: ''};
                scope.conditionAppend.condition = {value1: '', value2: '', where: 'AND'};
            }
            else
            {
                angular.forEach(scope.selectItems, function(item)
                {
                    if (item.value === scope.conditionAppend.selectedCondition.value)
                    {
                        scope.mySlected = item;
                        scope.conditionAppend.selectedCondition.name = scope.mySlected.name;
                        scope.conditionAppend.selectedCondition.value = scope.mySlected.value;
                        scope.conditionAppend.selectedCondition.symbol = scope.mySlected.symbol;
                        item.execute();
                        return false;
                    }
                });
            }
            
            element.find('select').on('change', function()
            {
                scope.conditionAppend.selectedCondition.name = scope.mySlected.name;
                scope.conditionAppend.selectedCondition.value = scope.mySlected.value;
                scope.conditionAppend.selectedCondition.symbol = scope.mySlected.symbol;
                scope.$apply(function()
                {
                    scope.mySlected.execute();
                });
            });
            
            scope.check = function(event)
            {
                var type = '';
                if (void 0 === scope.conditionAppend.column)
                {
                    type = scope.conditionAppend.type;
                }
                else
                {
                    type = scope.conditionAppend.column.type;
                }
                var val = scope.conditionAppend.condition.value1;
                if ('bigint' === type || 'int' === type || 'number' === type)
                {
                    if (void 0 === val)
                    {
                        scope.conditionAppend.error = false;
                        scope.conditionAppend.message = '';
                    }
                    else
                    {
                        if (!isFinite(parseInt(val, 10)))
                        {
                            scope.conditionAppend.error = true;
                            scope.conditionAppend.message = '数値で入力してください';
                        }
                        else
                        {
                            scope.conditionAppend.error = false;
                            scope.conditionAppend.message = '';
                        }
                    }
                }
                else if ('datetime' === type || 'smalldatetime' === type)
                {
                    if (void 0 === val)
                    {
                        scope.conditionAppend.error = false;
                        scope.conditionAppend.message = '';
                    }
                    else
                    {
                        var valL = val.split('-') ;
                        if (3 !== valL.length)
                        {
                            scope.conditionAppend.error = true;
                            scope.conditionAppend.message = '日付はYYYY-MM-DDで入力してください';
                        }
                        else
                        {
                            var m = Utility.moment(val);
                            if (!m.isValid())
                            {
                                scope.conditionAppend.error = true;
                                scope.conditionAppend.message = '有効な日付ではありません';
                            }
                            else
                            {
                                scope.conditionAppend.error = false;
                                scope.conditionAppend.message = '';
                            }
                        }
                    }
                }
            };
        }
    };
}]);
var myApp = angular.module('myApp');
myApp.directive('autoCompleteFaDirective', function()
{
    return {
        restrict: 'E',
        scope: {selectedItem: '=', itemList: '=', execute: '&', clickExecute: '&', namePropertie: '@', appendString: '@', showLabel: '=', selectByList: '=', selectName: '=', addonString: '@'},
        template:   '<div class="input-group"><span class="input-group-addon">{{addonString}}</span>'+
                    '<input ng-show="!isLabel" class="form-control form-control-add-fa2 " ng-model="selectName">' +
                    '<span ng-show="isLabel && selectName.length != 0" ng-click="changeElement()">{{appendString}}{{selectName}}</span>' +
                    '<ul class="complete-list" ng-show="isFocus">' +
                    '<li ng-repeat="item in itemList" ng-click="click($event, item)" >' +
                    '{{item[namePropertie]}}' +
                    '</li>' +
                    '</ul>' +
                    '<span class="input-group-addon question"><i class="fa fa-plus fa-2x" ng-click="clickI()"></i></span>',
        replace: true,
        link: function (scope, element, attrs) 
        {
            scope.selectName = '';
            scope.isFocus = false;
            scope.isLabel = false;
            var originList = [];
            scope.$watch('itemList', function(newValue, oldValue)
            {
                if (void 0 !== newValue && void 0 !== oldValue)
                {
                    if (newValue.length === oldValue.length)
                    {
                        return false;
                    }
                    if (newValue.length > oldValue.length)
                    {
                        originList = angular.copy(newValue);
                    }
                    else if (newValue.length < oldValue.length)
                    {
                        originList = angular.copy(oldValue);
                    }
                }
                else
                {
                    if (void 0 !== scope.itemList)
                    {
                        angular.copy(scope.itemList, originList);
                    }
                }
            });

            element.find('input').on('focus', function()
            {
                if (0 < scope.itemList.length)
                {
                    scope.$apply(function ()
                    {
                        scope.isFocus = true;
                    });
                }
            });
            
            element.find('input').on('blur', function()
            {
                var hide = setInterval(function(isExist)
                {
                    scope.$apply(function ()
                    {
                        if (scope.selectByList)
                        {
                            var num = originList.length;
                            var isExist = scope.selectName.length === 0 ? true : false;
                            for (var i = 0; i < num; i++)
                            {
                                if (scope.selectName === originList[i][scope.namePropertie])
                                {
                                    isExist = true;
                                    break;
                                }
                            }
                            
                            if (isExist)
                            {
                                element.find('input').removeClass('auto-complete-item-error');
                            }
                            else
                            {
                                element.find('input').addClass('auto-complete-item-error');
                            }
                            scope.isFocus = false;
                        }
                    });
                    clearInterval(hide);
                }, 300);
            });
            
            element.find('input').on('keyup', function()
            {
                if (0 === originList.length)
                {
                    angular.copy(scope.itemList, originList);
                }
                var createList = [];

                if (0 < scope.itemList.length)
                {
                    scope.isFocus = true;
                }
                if (scope.selectName.length === 0)
                {
                    angular.copy(originList, createList);
                }
                else
                {
                    var num = originList.length;
                    for (var i = 0; i < num ; i++)
                    {
                        if (originList[i][scope.namePropertie].indexOf(scope.selectName) !== -1)
                        {
                            createList.push(angular.copy(originList[i]));
                        }
                    }
                }
                scope.$apply(function ()
                {
                    angular.copy(createList, scope.itemList);
                });
            });
            
            scope.click = function ($event, item) 
            {
                //イベントが伝搬しないように制御
                $event.preventDefault();
                $event.stopPropagation();
                
                angular.copy(item, scope.selectedItem);
                element.find('input').removeClass('auto-complete-item-error');
                scope.isFocus = false;
                if (void 0 !== scope.execute)
                {
                    scope.execute();
                }
                if (scope.showLabel) scope.isLabel = true;
                scope.selectName = item[scope.namePropertie]; 
            };
            
            scope.changeElement = function()
            {
                angular.copy(originList, scope.itemList);
                scope.isLabel = false;
                element.find('input').focus();
            };
            
            scope.clickI = function()
            {
                angular.copy(originList, scope.itemList);
                scope.isFocus = false;
                scope.clickExecute();
            };
        }
    };
});